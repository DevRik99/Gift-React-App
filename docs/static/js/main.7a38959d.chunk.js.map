{"version":3,"sources":["components/AddCategory.js","helpers/GetGifts.js","components/GifGridIItem.js","components/GifGrid.js","hooks/useFetchGifts.js","components/GiftExpert.js","index.js"],"names":["AddCategory","setcategorias","useState","input","setInput","onSubmit","e","preventDefault","item","includes","trim","length","value","onChange","target","type","getGifts","categoria","a","url","fetch","resp","json","data","gifs","map","gif","id","title","images","downsized_medium","GifGridIItem","className","loading","src","alt","GifGrid","state","setstate","useEffect","then","imgs","useFecthGifts","image","GiftExpert","categorias","href","ReactDOM","render","document","getElementById"],"mappings":"2MAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACtBC,mBAAS,IADa,mBACzCC,EADyC,KAClCC,EADkC,KAkBhD,OACE,uBAAMC,SAda,SAACC,GACpBA,EAAEC,iBACFN,GAAc,SAACO,GACb,OAAIA,EAAKC,SAASN,GACTK,EAELL,EAAMO,OAAOC,OAAS,EAClB,CAAER,GAAR,mBAAkBK,IAEbA,KAETJ,EAAS,KAGT,UACE,uBAAOQ,MAAOT,EAAOU,SAlBJ,SAACP,GACpBF,EAASE,EAAEQ,OAAOF,UAkBhB,wBAAQG,KAAK,SAAb,yB,+BCvBOC,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAChBC,EADgB,0FACyEF,EADzE,uCAEHG,MAAMD,GAFH,cAEhBE,EAFgB,gBAGCA,EAAKC,OAHN,uBAGdC,EAHc,EAGdA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,MAAU,CAC9BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAKO,EAAIG,OAAOC,iBAAiBX,QAPb,kBASfK,GATe,4CAAH,sDCERO,EAAe,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACpC,OACE,sBAAKa,UAAU,OAAf,UACE,qBAAKC,QAAQ,OAAOC,IAAKf,EAAKgB,IAAKP,IACnC,4BAAIA,QCHGQ,EAAU,SAAC,GAAmB,IAAD,ECAb,SAACnB,GAAe,IAAD,EAChBf,mBAAS,CAAEqB,KAAM,GAAIU,SAAS,IADd,mBACnCI,EADmC,KAC5BC,EAD4B,KAO1C,OALAC,qBAAU,WACRvB,EAASC,GAAWuB,MAAK,SAACC,GACxBH,EAAS,CAAEf,KAAMkB,EAAMR,SAAS,SAEjC,CAAChB,IACGoB,EDN2BK,CADM,EAAhBzB,WACVY,EAD0B,EAChCN,KAAcU,EADkB,EAClBA,QACtB,OACE,sBAAKD,UAAU,iBAAf,UACGC,GAAW,6CACO,IAAlBJ,EAAOlB,QAAgB,8DACvBkB,EAAOJ,KAAI,SAACkB,GACX,OAAO,cAAC,EAAD,eAAiCA,GAAdA,EAAMhB,WEL3BiB,EAAa,WAAO,IAAD,EACM1C,mBAAS,CAAC,QAAS,WAAY,OADrC,mBACvB2C,EADuB,KACX5C,EADW,KAE9B,OACE,sBAAK+B,UAAU,YAAf,UACE,0CACA,cAAC,EAAD,CAAa/B,cAAeA,IAC5B,uBACA,6BACG4C,EAAWpB,KAAI,SAACR,GAAD,OACd,6BACE,mBAAG6B,KAAM,IAAM7B,EAAf,SAA2BA,KADpBA,QAKZ4B,EAAWpB,KAAI,SAACR,GAAD,OACd,sBAAqBe,UAAU,YAA/B,UACE,oBAAIA,UAAU,YAAYL,GAAIV,EAA9B,SACGA,IAEH,cAAC,EAAD,CAASA,UAAWA,MAJZA,UCblB8B,IAASC,OAAO,cAAC,EAAD,IAAgBC,SAASC,eAAe,W","file":"static/js/main.7a38959d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport const AddCategory = ({ setcategorias }) => {\r\n  const [input, setInput] = useState(\"\");\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setcategorias((item) => {\r\n      if (item.includes(input)) {\r\n        return item;\r\n      }\r\n      if (input.trim().length > 0) {\r\n        return [input, ...item];\r\n      }\r\n      return item;\r\n    });\r\n    setInput(\"\");\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input value={input} onChange={handleChange}></input>\r\n      <button type=\"submit\">Agregar</button>\r\n    </form>\r\n  );\r\n};\r\n","export const getGifts = async (categoria) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=ZsKy0kYfYxbDYmydyMg9dp33R2iO69wQ&q=${categoria}&limit=9&offset=0&rating=g`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n  const gifs = data.map((gif) => ({\r\n    id: gif.id,\r\n    title: gif.title,\r\n    url: gif.images.downsized_medium.url,\r\n  }));\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifGridIItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img loading=\"lazy\" src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFecthGifts } from \"../hooks/useFetchGifts.js\";\r\nimport { GifGridIItem } from \"./GifGridIItem.js\";\r\nexport const GifGrid = ({ categoria }) => {\r\n  const { data: images, loading } = useFecthGifts(categoria);\r\n  return (\r\n    <div className=\"card-container\">\r\n      {loading && <p>Cargando ...</p>}\r\n      {images.length === 0 && <h3>No se encontraron resultados</h3>}\r\n      {images.map((image) => {\r\n        return <GifGridIItem key={image.id} {...image} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifts } from \"../helpers/GetGifts\";\r\n\r\nexport const useFecthGifts = (categoria) => {\r\n  const [state, setstate] = useState({ data: [], loading: true });\r\n  useEffect(() => {\r\n    getGifts(categoria).then((imgs) => {\r\n      setstate({ data: imgs, loading: false });\r\n    });\r\n  }, [categoria]);\r\n  return state;\r\n};\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useState } from \"react\";\r\nimport { AddCategory } from \"./AddCategory\";\r\nimport { GifGrid } from \"./GifGrid\";\r\n\r\nexport const GiftExpert = () => {\r\n  const [categorias, setcategorias] = useState([\"X-Men\", \"Avengers\", \"DC\"]);\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Gift App</h1>\r\n      <AddCategory setcategorias={setcategorias} />\r\n      <hr></hr>\r\n      <ul>\r\n        {categorias.map((categoria) => (\r\n          <li key={categoria}>\r\n            <a href={\"#\" + categoria}>{categoria}</a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {categorias.map((categoria) => (\r\n        <div key={categoria} className=\"container\">\r\n          <h3 className=\"categoria\" id={categoria}>\r\n            {categoria}\r\n          </h3>\r\n          <GifGrid categoria={categoria} />\r\n        </div>\r\n      ))}\r\n\r\n      {/* <button onClick={handleAdd}>Agregar</button> */}\r\n    </div>\r\n  );\r\n};\r\n","// import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from './App';\n// import reportWebVitals from \"./reportWebVitals\";\nimport { GiftExpert } from \"./components/GiftExpert\";\n\nReactDOM.render(<GiftExpert />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}